@using AirQualityMonitor.Models
@using AirQualityMonitor.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Configuration
@inject CountryService CountryService
@inject CityService CityService
@inject MeasurementService MeasurementService
@inject IConfiguration Configuration

<label for="countries">Select your country:</label>
<select name="countries" id="countries" @onchange="(e => SelectCountry(e.Value.ToString()))">
    <option value="null">---</option>
    @foreach (var country in CountryService.GetCountries())
    {
        <option value="@country.Code">@country.Name</option>
    }
</select>

@if (selectedCountry != null)
{
    if (selectedCountry.Cities > 0)
    {
        <div class="table-container">
            <h4>Choose your city:</h4>
            <div>
                <table>
                    @foreach (var city in cities)
                    {
                        <tr>
                            <td>@city.Name</td>
                            <td><button @onclick="(e => SelectCity(city.Name))">Select</button></td>
                        </tr>
                    }
                </table>
            </div>
            <div class="pagination-container">
                <button @onclick="(e => ChangePageNumber(-1))" disabled="@(page == 1)">Previous</button>
                <p>Showing @CalculateShowing() of @selectedCountry.Cities</p>
                <button @onclick="(e => ChangePageNumber(1))" disabled="@CheckIfAtEndOfCityResults()">Next</button>
            </div>
        </div>
    }
    else
    {
        <p>Sorry, no cities found for @selectedCountry.Name</p>
    }
}

@if (selectedCity != null)
{
    <div>
        <h4>Select your timeframe:</h4>
        <div>
            <label for="measurements-from">From</label>
            <input type="date" id="measurements-from" @onchange="(e => UpdateFrom(e.Value.ToString()))" min="2000-01-01" max="@DateTime.Today.ToString("yyyy-MM-dd")" value="@from.ToString("yyyy-MM-dd")" />
            <label for="measurements-to">To</label>
            <input type="date" id="measurements-to" @onchange="(e => UpdateTo(e.Value.ToString()))" min="2000-01-01" max="@DateTime.Today.ToString("yyyy-MM-dd")" value="@to.ToString("yyyy-MM-dd")" />
            <button @onclick="(e => GetMeasurements())">Update results</button>
        </div>
        <label for="number-of-results">Results</label>
        <select name="number-of-measurements" id="number-of-measurements" @onchange="(e => UpdateMeasurementLimit(int.Parse(e.Value.ToString())))" value="10">
            <option value="1">1</option>
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="40">40</option>
        </select>
    </div>

    if (measurements.Count > 0)
    {
        <div class="table-container">
            <h5>Showing the most recent results for your chosen timeframe</h5>
            <table>
                <tr>
                    <th>Location</th>
                    <th>Value</th>
                    <th>Date &amp; Time (local)</th>
                </tr>
                @foreach (var measurement in measurements)
                {
                    <tr>
                        <td>@measurement.Location</td>
                        <td>@measurement.Value @measurement.Unit</td>
                        <td>@measurement.Date.Local.ToString("G")</td>
                    </tr>
                }
            </table>
        </div>
    }
    else
    {
        <p>Sorry, no measurements found for @selectedCity.Name within your chosen timeframe</p>
    }
}

@code {
    Country selectedCountry;
    List<City> cities;
    City selectedCity;
    int page = 1;
    List<Measurement> measurements;
    DateTime from = DateTime.Today.AddYears(-5);
    DateTime to = DateTime.Today;
    int measurementLimit;

    void SelectCountry(string code)
    {
        RevertToDefaults();
        if (!code.Equals("null"))
        {
            selectedCountry = CountryService.GetCountries().First(c => c.Code.Equals(code));
            cities = CityService.GetCities(selectedCountry.Code, page);
        }
    }

    void RevertToDefaults()
    {
        selectedCountry = null;
        cities = new List<City>();
        selectedCity = null;
        page = 1;
        measurements = new List<Measurement>();
        measurementLimit = int.Parse(Configuration["Defaults:ResultLimit"]);
    }

    void SelectCity(string name)
    {
        selectedCity = cities.First(c => c.Name.Equals(name));
        GetMeasurements();
    }

    void ChangePageNumber(int increment)
    {
        page += increment;
        cities = CityService.GetCities(selectedCountry.Code, page);
    }

    string CalculateShowing()
    {
        var lower = -9 + (page * int.Parse(Configuration["Defaults:ResultLimit"]));
        if (lower > selectedCountry.Cities)
        {
            lower = selectedCountry.Cities;
        }

        var upper = page * int.Parse(Configuration["Defaults:ResultLimit"]);
        if (upper > selectedCountry.Cities)
        {
            upper = selectedCountry.Cities;
        }

        return $"{lower} - {upper}";
    }

    bool CheckIfAtEndOfCityResults()
    {
        var resultNumber = page * int.Parse(Configuration["Defaults:ResultLimit"]);
        return resultNumber >= selectedCountry.Cities;
    }

    void GetMeasurements()
    {
        measurements = MeasurementService.GetMeasurements(selectedCountry.Code, selectedCity.Name, from, to, measurementLimit);
    }

    void UpdateFrom(string newFrom)
    {
        from = DateTime.Parse(newFrom);
    }

    void UpdateTo(string newTo)
    {
        to = DateTime.Parse(newTo);
    }

    void UpdateMeasurementLimit(int newMeasurementLimit)
    {
        measurementLimit = newMeasurementLimit;
        GetMeasurements();
    }
}